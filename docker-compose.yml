# Docker Compose for local development and testing
# This demonstrates multi-container orchestration before moving to Kubernetes

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: taskmanager-postgres
    restart: unless-stopped
    environment:
      # Database configuration
      POSTGRES_DB: taskmanager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secretpassword
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      # Expose PostgreSQL port for external access (development only)
      - "5434:5432"
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Optional: Custom initialization scripts
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskmanager"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Task Management API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: taskmanager-api
    restart: unless-stopped
    environment:
      # Application configuration
      NODE_ENV: production
      PORT: 3000
      # Database connection (using service name as hostname)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskmanager
      DB_USER: postgres
      DB_PASSWORD: secretpassword
    ports:
      # Expose API port
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Resource limits (similar to Kubernetes resource requests/limits)
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Optional: pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: taskmanager-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - taskmanager-network
    profiles:
      # Only start with: docker-compose --profile dev up
      - dev

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local

# Custom network for service communication
networks:
  taskmanager-network:
    driver: bridge
